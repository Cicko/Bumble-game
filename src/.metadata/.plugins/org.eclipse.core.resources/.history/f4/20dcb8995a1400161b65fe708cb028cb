/**
 * @author Rudolf Cicko
 * @email alu0100824780@ull.edu.es
 * @description Shooter panel that contain balls and the gun that shoot more balls.
 * @subject Programaci√≥n de aplicaciones interactivas
 */
package es.ull.esit.pai.p12_disparos;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JPanel;

public class ShooterPanel extends JPanel implements MouseMotionListener, MouseListener {
	private final int SAME_COLOR = 1;
	private final int TIMER_DELAY = 10;         // miliseconds before the timer starts
	private final int TIMER_INTERVAL = 10;      // interval between frames
	private final int Y_GUN_MARGIN = 10;
	private Timer timer = new Timer ();
	private Gun gun;
	private Ball actualPreparedBall = null;            // the actual prepared ball to be shooted.
	private Ball shootedBall = null;
	private boolean canShoot;
	private ArrayList<Ball> balls;                     // All balls that are in the screen.
	
	public ShooterPanel () {
		Point gunOrigin = new Point (300, 600 - Y_GUN_MARGIN); 
		gun = new Gun (gunOrigin, this);
		balls = new ArrayList<Ball> ();
		
		timer.schedule(new TimerTask() {
			public void run () {
				if (shootedBall != null) {
					gun.paint();
					shootedBall.move();
					if (shootedBall.isCollided()) {
						canShoot = true;
						balls.add(shootedBall);
						//shootedBall = null;
					}
					System.out.println ("Shooting");
				}
				for (int i = 0; i < balls.size(); i++) {
					balls.get(i).move();
					if (shootedBall.colliding(balls.get(i))) {
						if (shootedBall.collided(balls.get(i)) == SAME_COLOR) {
							System.out.println ("Same Color");
						}
					}
				}
			}
		}, TIMER_DELAY, TIMER_INTERVAL);
		
		canShoot = true;
	
	}
	
	
	/**
	 * This method shot a ball from the gun with the specified angle
	 * @param angle is the angle used to shoot the ball.
	 */
	public void shoot () {
		if (canShoot) {
			canShoot = false;
			shootedBall = actualPreparedBall;
			actualPreparedBall = null;
			shootedBall.shoot (gun.getNormalizedVector());
		}
	}
	
	
	public Color getRandomColor () {
		Color color = null;
		int candidate = (int) (Math.random() * 4.0);
		switch (candidate) {
		case 0:
			color = Color.red;
			break;
		case 1:
			color = Color.blue;
			break;
		case 2:
			color = Color.yellow;
			break;
		case 3:
			color = Color.green;
			break;
		}
		return color;
	}
	
	/**
	 * Main method for drawing things on the panel
	 */
	public void paintComponent (Graphics g) {
		
	}


	/**
	 * Method that is automatically invoked when the mouse is moved.
	 */
	@Override
	public void mouseMoved(MouseEvent e) {
		Point arrowHeadPos = gun.setMousePos (e.getPoint());
		if (actualPreparedBall == null) {
			actualPreparedBall = new Ball (arrowHeadPos, getRandomColor(), this);
		}
		else {
			actualPreparedBall.setPosition(arrowHeadPos);
		}
	}
	


	@Override
	public void mouseReleased(MouseEvent arg0) {
		shoot();
		System.out.println ("Shoot");
	}
	
    // NOT USED METHODS
	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	
	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
